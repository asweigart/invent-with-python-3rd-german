    Kapitel 4
    Rate die Zahl

In diesem Kapitel behandelte Themen:

•   import-Anweisungen
•   Module
•   while-Anweisungen
•   Bedingungen
•   Blöcke
•   Wahrheitswerte
•   Vergleichsoperatoren
•   Den Unterschied zwischen = und ==
•   if-Anweisungen
•   Das Schlüsselwort break
•   Die Funktionen str(), int() und float()
•   Die Funktion random.randint()

In diesem Kapitel wirst du ein “Rate die Zahl”-Spiel schreiben. Der Computer wird an eine Zufallszahl zwischen 1 und 20 denken und dich bitten, sie zu erraten. Der Computer wird dir bei jedem Tipp, den du abgibst, sagen ob er zu hoch oder zu niedrig war. Du gewinnst wenn du die Zahl innerhalb von sechs Versuchen erraten kannst.

“Rate die Zahl” ist interessant zu programmieren, weil es Zufallszahlen, Schleifen und Benutzereingaben in einem ziemlich kurzen Programm verwendet. Du wirst lernen, wie man Werte in unterschiedliche Datentypen umwandelt (und warum das notwendig ist). Weil unser Programm ein Spiel ist, nennen wir den Benutzer Spieler, aber “Benutzer” wäre auch ok.

Probelauf von Rate die Zahl

So sieht das Programm für den Spieler aus, wenn es ausgeführt wird. Der Text den der Spieler eintippt ist fett geschrieben.

Hallo! Was ist dein Name?
Albert
Also, Albert, ich denke an eine Zahl zwischen 1 und 20.
Los, rate.
10
Dein Tipp ist zu hoch.
Los, rate.
2
Dein Tipp ist zu niedrig.
Los, rate.
4
Gut gemacht, Albert! Du hast meine Zahl in 3 Zügen erraten.

Der Quellcode zu Rate die Zahl

Öffne ein neues Dateieditorfenster, indem du auf File ► New Window klickst. Tippe in dem neu erschienenen leeren Fenster den Quellcode ein und speichere die Datei dann unter zahlenRaten.py ab. Drücke F5 um das Programm auszuführen. Wenn du den Programmcode eintippst, musst du besonders auf die Leerzeichen am Beginn der Zeilen achten. Manche Zeilen haben vier und einige sogar acht Leerzeichen am Zeilenanfang.

WICHTIGER HINWEIS! Die Programme in diesem Buch laufen nur mit Python 3, nicht Python 2. Die Titelleiste des IDLE-Fensters verrät dir, welche Version installiert ist. Falls es Python 2 ist, kannst du Python 3 nebenher installieren. Um Python 3 herunterzuladen, besuche https://python.org/download/.

Falls du Fehler nach dem Abtippen des Codes erhältst, vergleiche ihn mit dem Code im Buch mit Hilfe des Diff-Werkzeuges unter http://invpy.com/de/diff/jokes.

zahlenRaten.py

 1.  # Das ist ein Zahlenratespiel.
 2.  import random
 3.
 4.  abgegebenTipps = 0
 5.
 6.  print('Hallo! Was ist dein Name?')
 7.  meinName = input()
 8.
 9.  zahl = random.randint(1, 20)
10.  print('Also, ' + meinName + ', ich denke an eine Zahl zwischen 1 und 20.')
11.
12.  while abgegebenTipps < 6:
13.      print('Los, rate.') # Vor print sind vier Leerzeichen.
14.      tipp = input()
15.      tipp = int(tipp)
16.
17.      abgegebenTipps = abgegebenTipps + 1
18.
19.      if tipp < zahl:
20.          print('Dein Tipp ist zu niedrig.') # Hier sind acht Leerzeichen vor print.
21.
22.      if tipp > zahl:
23.          print('Dein Tipp ist zu hoch.')
24.
25.      if tipp == zahl:
26.          break
27.
28.  if tipp == zahl:
29.      abgegebenTipps = str(abgegebenTipps)
30.      print('Gut gemacht, ' + meinName + '! Du hast meine Zahl in ' + abgegebenTipps + ' Zügen erraten!')
31.
32.  if tipp != zahl:
33.      zahl = str(zahl)
34.      print('Nene. Die Nummer an die ich gedacht habe war ' + zahl)

import-Anweisungen

 1.  # Das ist ein Zahlenratespiel.
 2.  import random

Die erste Zeile ist ein Kommentar. Python ignoriert alles nach dem Zeichen #. Diese Zeile dient nur dazu, uns daran zu erinnern, was das Programm macht.

Bei der zweiten Zeile handelt es sich um eine import-Anweisungen. Anweisungen sind Instruktionen, die eine Handlung durchführen, jedoch nicht wie Ausdrücke ausgewertet werden können. Wir haben Anweisungen bereits kennengelernt: Zuweisungs-Anweisungen speichern einen Wert in einer Variable.

Python bringt viele Funktionen mit; ein großer Teil davon befindet sich in getrennten Programmen, die Module genannt werden. Um diese Funktionen verwenden zu können, musst du die dazugehörigen Module mit einer import-Anweisung in dein Programm importieren.

Zeile 2 importiert das Modul mit dem Namen “random” (Englisch für “Zufall”), damit das Programm random.randint() aufrufen kann. Diese Funktion liefert die Zufallszahlen, die der Benutzer erraten muss.

4. abgegebeneTipps = 0

Zeile 4 erstellt eine neue Variable mit dem Namen agbgebeneTipps. In dieser Variable wird die Anzahl der Tipps, die der Spieler abgegeben hat, gespeichert. Wir setzen die Variable hier auf die Ganzzahl 0, weil der Spieler noch keinen Tipp abgegeben hat.

6.  print('Hallo! Was ist dein Name?')
7.  meinName = input()

Zeilen 6 und 7 sind identisch mit dem Hallo Welt-Programm aus Kapitel 3. Programmierer verwenden Programmcode aus alten Programmen oft wieder, um sich Arbeit zu sparen.

Zeile 6 ruft die print()-Funktion auf. Wir erinnern uns, dass ein Funktionsaufruf wie ein Miniprogramm in unserem Programm ist. Wenn ein Programm eine Funktion aufruft, dann führt es dieses Miniprogramm aus. Der Code innerhalb der print()-Funktion zeigt das ihr übergebene Zeichenketten-Argument auf dem Bildschirm an.

Zeile 7 lässt den Benutzer seinen Name eingeben und speichert die Eingabe in der Variable meinName. (Die Zeichenkette muss nicht wirklich der Name des Spielers sein, sondern ist einfach genau die Zeichenkette, die der Spieler eintippt. Computer sind dumm und folgen einfach stur deinen Anweisungen.)

Die random.randint()-Funktion

9.  zahl = random.randint(1, 20)

Zeile 9 ruft eine neue Funktion mit dem Namen randint() auf und speichert den Rückgabewert in zahl ab. Funktionsaufrufe können Teil eines Ausdruckes sein, weil sie zu einem Wert ausgewerteten werden.

Die randint()-Funktion wird vom random-Modul zur Verfügung gestellt. Deshalb muss ihrem Aufruf random vorangestellt werden (vergiss den Punkt nicht!). Dies teilt Python mit, dass die Funktion randint() im Modul random zu finden ist.

Die randint()-Funktion wird eine Zufallszahl zwischen und einschließlich der beiden übergebenen Ganzzahlen-Argumente zurückgeben. Zeile 9 übergibt die Ganzzahlen 1 und 20 an randint(), indem sie von einem Komma getrennt in die Klammern hinter dem Funktionsnamen geschrieben werden. Die Zufallszahl, die randint() zurückgibt, wird in einer Variable namens zahl gespeichert; das ist die geheime Zahl, die der Spieler erraten muss.

Wechsle für einen Moment in die interaktive Konsole und gib import random ein, um das random-Modul zu importieren. Dann tippe random.randint(1, 20) und drücke die Eingabetaste, um zu sehen, was der Funktionsaufruf zurückgibt. Er wird eine Ganzzahl von 1 bis 20 zurückgeben. Wenn du die Eingabe wiederholst, wird die Funktion wahrscheinlich eine andere Zahl zurückgeben. Die randint()-Funktion gibt jedes Mal eine zufällige Zahl aus dem übergebenen Wertebereich zurück, ähnlich wie ein Würfel bei jedem Wurf auf einer zufälligen Zahl landet.

>>> import random
>>> random.randint(1, 20)
12
>>> random.randint(1, 20)
18
>>> random.randint(1, 20)
3
>>> random.randint(1, 20)
18
>>> random.randint(1, 20)
7

Verwende die randint()-Funktion, um deinem Spiel ein zufälliges Element hinzuzufügen. Wir werden das Zufallselement noch in vielen weiteren Spielen verwenden (denke daran, wie viele Brettspiele Würfel benutzen).

Du kannst den Wertebereich ändern, indem du verschiedene Argumente übergibst. Probiere zum Beispiel random.randint(1, 4) einzugeben, um nur Ganzzahlen von 1 bis 4 (einschließlich 1 und 4) zu erhalten. Oder gib random.randint(1000, 2000) ein, um Ganzzahlen zwischen 1000 und 2000 zu erhalten.

Probiere die Beispiele in der interaktiven Konsole aus. Die Ergebnisse, die du erhältst werden wahrscheinlich anders aussehen (es handelt sich immerhin um Zufallszahlen).

>>> random.randint(1, 4)
3
>>> random.randint(1000, 2000)
1294

Du kannst den Quellcode und damit das Verhalten des Spiels ändern. Ersetze die Zeilen:

 9. zahl = random.randint(1, 20)
10. print('Also, ' + meinName + ', ich denke an eine Zahl zwischen 1 und 20.')

…durch:

 9. zahl = random.randint(1, 100)
10. print('Also, ' + meinName + ', ich denke an eine Zahl zwischen 1 und 100.')

Jetzt wird der Computer an eine Zahl zwischen 1 und 100, statt an eine zwischen 1 und 20 denken. Durch Ändern von Zeile 9 wird der Wertebereich der Zufallszahlen geändert. Vergiss nicht auch Zeile 10 zu ändern, damit das Spiel dem Spieler den korrekten Wertebereich anzeigt.

Den Spieler begrüßen

10. print('Also, ' + meinName + ', ich denke an eine Zahl zwischen 1 und 20.')

In Zeile 10 heißt die print()-Funktion den Spieler willkommen und teilt ihm mit, dass der Computer an eine Zufallszahl denkt.

Es hat den Anschein, als enthielte Zeile 10 drei Zeichenketten, aber sieh dir die Zeile genau an. Die Pluszeichen verketten die drei Zeichenketten zu einer einzigen. Und das ist das einzige Zeichenketten-Argument, das an die print()-Funktion übergeben wird. Die Kommata befinden sich innerhalb der Anführungszeichen und sind damit Teil der Zeichenkette selbst.

Schleifen

12. while abgegebenTipps < 6:

Zeile 12 ist eine while-Anweisung, die auf den Beginn einer while-Schleife hindeutet. Schleifen erlauben es dir, einen Codeabschnitt immer wieder auszuführen. Wir müssen jedoch ein paar andere Konzepte durchgehen, bevor wir uns Schleifen genauer ansehen. Dazu gehören Blöcke, Wahrheitswerte, Vergleichsoperatoren, Bedingungen und die while-Anweisung.

Blöcke

Mehrere Zeilen Programmcode können in einem Block gruppiert werden. Jede Zeile in einem Block hat dieselbe minimale Einrückung. An der Anzahl an Leerzeichen am Anfang der Zeile siehst du, wo ein Block beginnt. Das ist die Einrückung (auf Englisch “indentation”) der Zeile.

Ein Block beginnt wenn die Einrückung der Zeile sich erhöht (normalerweise um vier Leerzeichen). Alle folgenden Zeilen mit gleicher Einrückung sind Teil des Blocks. Der Block endet, sobald eine Zeile mit geringerer Einrückung beginnt. Das heißt, Blöcke können in anderen Blöcken enthalten sein (man sagt auch: Blöcke können ineinander verschachtelt sein). Abbildung 4-1 ist ein Diagramm des Codes, in dem die Blöcke umrissen und durchnummeriert sind.

In Abbildung 4-1 ist Zeile 12 nicht eingerückt und daher auch nicht Teil eines Blocks. Zeile 13 ist vier Leerzeichen eingerückt. Da diese Einrückung größer ist, als die der vorherigen Zeile, beginnt hier ein neuer Block. Der Block ist in Abbildung 4-1 mit (1) gekennzeichnet. Dieser Block erstreckt sich bis zur nächsten Zeile ohne Einrückung. Leerzeilen werden ignoriert.

Zeile 20 hat eine Einrückung von acht Leerzeichen. Acht Leerzeichen sind mehr als vier Leerzeichen, was wiederum einen neuen Block beginnt. Dieser Block ist in Abbildung 4-1 mit (2) gekennzeichnet. Dieser Block ist Teil eines anderen Blocks.

Abbildung 4-1: Blöcke und deren Einrückung. Die schwarzen Quadrate repräsentieren Leerzeichen.

Zeile 22 hat nur vier Einrückungen. Da sich die Einrückung verringert hat, weißt du, dass der Block zu Ende ist. Zeile 20 ist die einzige Zeile in diesem Block. Zeile 22 ist Teil desselben Blocks wie alle anderen Zeilen mit vier Leerzeichen.

Zeile 23 erhöht die Einrückung wieder auf 8 Leerzeichen. Es beginnt also wieder ein neuer Block. Er ist in Abbildung 4-1 mit (3) gekennzeichnet.

Zusammengefasst: Zeile 12 gehört zu keinem Block. Zeilen 13 bis 23 gehören alle zu Block (1). Zeile 20 ist einem Block innerhalb von Block (2). Und Zeile 23 ist die einzige Zeile in einem weiteren Block innerhalb von Block (3).

Wahrheitswerte

Wahrheitswerte (auch boolesche Werte genannt (auf Englisch “boolean”)) können nur zwei Werte annehmen: True (Englsich für “wahr”) oder False (Englisch für “falsch”). Diese Werte müssen genauso geschrieben werden, wie sie hier aufgeführt sind (mit einem großen “T” bzw. “F” gefolgt von Kleinbuchstaben). Du wirst boolesche Werte mit Vergleichsoperatoren verwenden, um Bedingungen zu formulieren. (Bedingungen werden später erläutert.)

Du kannst Wahrheitswerte natürlich auch in Variablen speichern:

>>> speck = True
>>> eier  = False

Die Datentypen, die bis jetzt vorgestellt wurden sind Ganzzahlen (auf Englisch “integer”), Fließkommazahlen (auf Englisch “float”), Zeichenketten (auf Englisch “string”) und nun Wahrheitswerte (auf Englisch “boolean” oder kurz “bool”). Jeder Wert in Python gehört zu einem Datentyp.

Vergleichsoperatoren

Zeile 12 enthält eine while-Anweisung:

12. while abgegebenTipps < 6:

Der Ausdruck der dem while-Schlüsselwort folgt (der abgegebenTipps < 6-Teil) enthält zwei Werte (der Wert in der Variable abgegebeneTipps und der Ganzzahlenwert 6) verbunden durch einen Operator (das < “kleiner als”-Zeichen). Das <-Zeichen ist ein Vergleichsoperator.

Vergleichsoperatoren vergleichen zwei Werte und werden entweder zu True oder zu False ausgewertet. Eine Liste aller Vergleichsoperatoren findest du in Tabelle 4-1.

Tabelle 4-1: Vergleichsoperatoren
Operatoren-Symbol   Operatoren-Name
<   Kleiner als
>   Größer als
<=  Kleiner als oder gleich
>=  Größer als oder gleich
==  Gleich
!=  Ungleich

Du kennst schon die mathematischen Operatoren +, -, * und /. Wie alle Operatoren werden die Vergleichsoperatoren mit Werten kombiniert, um Ausdrücke wie abgegebenTipps < 6 zu bilden.

Bedingungen

Eine Bedingung ist ein Ausdruck, der zwei Werte mit einem Vergleichsoperator kombiniert (so wie < oder >) und zu einem Wahrheitswert auswertet. Bedingung ist nur ein anderer Name für “Ausdruck der zu True oder False ausgewertet wird”. Bedingungen werden in while-Anweisungen verwendet (und in ein paar anderen Instruktionen, die später erklärt werden).

Die Bedingung abgegebeneTipps < 6 fragt zum Beispiel: “Ist der in abgegebeneTipps gespeicherte Wert kleiner als die Zahl 6?”. Falls ja, dann wir die Bedingung zu True ausgewertet, falls nein, dann wir sie zu False ausgewertet.

In unserem “Rate die Zahl”-Programm wird in Zeile 4 der Wert 0 in abgegebeneTipps gespeichert. Weill 0 weniger als 6 ist, wird diese Bedingung zu True ausgewertet. Die Auswertung würde in etwa so aussehen:

abgegebeneTipps < 6
                ▼
              0 < 6
                ▼
               True

Experimente mit Wahrheitswerten, Vergleichsoperatoren und Bedingungen.

Gib die folgenden Ausdrücke in die interaktive Konsole ein und sieh dir an, zu welchen Wahrheitswerten sie ausgewertet werden:

>>> 0 < 6
True
>>> 6 < 0
False
>>> 50 < 10
False
>>> 10 < 11
True
>>> 10 < 10
False

Die Bedingung 0 < 6 wird zu True ausgewertet weil die Zahl 0 kleiner als die Zahl 6 ist. Umgekehrt ist natürlich 6 nicht kleiner als 0 also ergibt 6 < 0 False. 50 ist nicht weniger als 10, also ist 50 < 10 False. 10 ist weniger als 11, also ist 10 < 11 True.

10 < 10 wird zu False ausgewertet weil 10 nicht kleiner als 10 ist, sondern gleich groß. Wenn Alice und Bertl gleich groß sind, dann würdest du auch nicht sagen, dass Alice größer als Bertl sei oder dass Bertl kleiner als Alice sei. Beide Aussagen wären falsch.

Probiere nun folgende Ausdrücke in die interaktive Konsole einzugeben:

>>> 10 == 10
True
>>> 10 == 11
False
>>> 11 == 10
False
>>> 10 != 10
False
>>> 10 != 11
True
>>> 'Hallo' == 'Hallo'
True
>>> 'Hallo' == 'Tschüss'
False
>>> 'Hallo' == 'HALLO'
False
>>> 'Tschüss' != 'Hallo'
True

Der Unterschied zwischen = und ==

Der Zuweisungsoperator (=) und der Gleichheitsoperator (==) sind leicht zu verwechseln. Das einfache Gleichheitszeichen (=) wird in Zuweisungsausdrücken verwendet, um einen Wert in einer Variable zu speichern, das doppelte Gleichheitszeichen (==) wird verwendet, um zu testen, ob zwei Werte gleich sind.

Es gibt eine Eselsbrücke, um die beiden Operatoren auseinander zu halten: Der “ist gleich”-Operator (==), sowie der “ist nicht gleich”-Operator (!=) bestehen beide aus zwei Zeichen.

Zeichenketten und Ganzzahlen können niemals gleich zueinander sein. Probiere Folgendes in die interaktive Konsole einzugeben:

>>> 42 == 'Hallo'
False
>>> 42 != '42'
True

Iterieren mit while-Anweisungen

Die while-Anweisung (Englisch für “solange”) markiert den Beginn einer Schleife. Schleifen führen denselben Code wiederholt aus (was man auch als “iterieren” bezeichnet). Wenn die Programmausführung die while-Anweisung erreicht, dann wird die Bedingung neben dem while-Schlüsselwort ausgewertet. Ist die Bedingung wahr, so begibt sich die Ausführung in den folgenden Block, while-Block genannt. (In obigem Programm beginnt der while-Block in Zeile 13.) Ist die Bedingung falsch, dann wird der while-Block übersprungen und die Ausführung in der ersten Zeile nach dem while Block fortgesetzt. In Rate die Zahl ist Zeile 28 die erste Zeile nach dem while-Block.

Eine while-Anweisung enthält immer einen Doppelpunkt : nach der Bedingung. Anweisungen, die mit einem Doppelpunkt enden erwarten, dass in der nächsten Zeile ein neuer Block beginnt.

12. while abgegebenTipps < 6:

Abbildung 4-2: Die Bedingung der while-Schleife

Abbildung 4-2 zeigt den Verlauf der Programmausführung in Abhängigkeit von der Bedingung. Wenn die Bedingung zu True ausgewertet wird (wie es beim ersten Durchlauf des Programms der Falls ist, weil der Wert von abgegebeneTipps 0 ist), dann wird nach der while-Anweisung der while-Block beginnend in Zeile 13 ausgeführt. Wenn das Programm das Ende des while Blocks erreicht, dann wird es nicht in der Zeile darunter fortfahren, sondern wieder zurück zur while-Anweisung (Zeile 12) springen und deren Bedingung auswerten (man sagt auch “evaluieren”). Ist die Bedingung wahr, betritt die Ausführung wie zuvor in den while-Block. Jeder dieser Schleifendurchgänge wird als Iteration bezeichnet.

Die while-Schleife funktionier folgendermaßen: Solange die Bedingung wahr ist, führt das Programm immer wieder den while-Block aus, bis die Bedingung zum ersten Mal falsch ist. Die while-Anweisung könnte man in Worten so ausdrücken: “solange (while) diese Bedingung wahr (True) ist, führe den Code im folgenden Block aus”.

Der Spieler rät

13.    print('Los, rate.') # Vor print sind vier Leerzeichen.
14.    tipp = input()

Zeilen 13 bis 17 fordern den Spieler auf, eine Zahl zu raten und diese einzugeben. Diese Zahl wird in der Variable tipp gespeichert.

Zahlen mit den Funktionen int(), float() und str() umwandeln

15.    tipp = int(tipp)

Zeile 15 ruft eine neue Funktion mit dem Namen int() auf. Die int()-Funktion erwartet ein Argument und gibt den Ganzzahlenwert des Arguments zurück. Probiere Folgendes in die interaktive Konsole einzugeben:

>>> int('42')
42
>>> 3 + int('2')
5

Der Funktionsaufruf int('42') gibt den Ganzzahlenwert 42 zurück. int() kann allerdings nicht beliebige Zeichenketten in Ganzzahlen umwandeln. Wenn z.B. 'zweiundvierzig' übergeben würde, würde das in einem Fehler resultieren. Die an int() übergebene Zeichenkette muss aus Zahlen bestehen:

>>> int('zweiundvierzig')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
    int('zweiundvierzig')
ValueError: invalid literal for int() with base 10: 'zweiundvierzig'

Die Zeile, die 3 + int('2') enthält, zeigt wie der Rückgabewert von int() als Teil eines Ausdruckes verwendet werden kann. Der Ausdruck wird zur Ganzzahl 5 ausgewertet:

3 + int('2')
  ▼
3 + 2
  ▼
  5

Wir erinnern uns, dass input() die Eingabe des Spielers als Zeichenkette zurückgibt. Wenn der Spieler 5 eintippt, dann gibt die input()-Funktion den Zeichenkettenwert '5' zurück, nicht den Ganzzahlenwert 5. Python kann die Vergleichsoperatoren < und > nicht auf eine Mischung aus Zeichenketten und Ganzzahlen anwenden.

>>> 4 < '5'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unorderable types: int() < str()

In Zeile 14 enthält die Variable tipp zunächst den Zeichenkettenwert der Spielereingabe. In Zeile 15 wird der Zeichenkettenwert mit dem von int() zurückgegebenen Ganzzahlenwert überschrieben. Dies erlaubt dem Code später im Programm zu testen, ob der Tipp größer als, kleiner als oder gleich der in zahl gespeicherten Geheimzahl ist.

Eine letzte Sache noch: Der Aufruf int(tipp) ändert den Wert in tipp nicht. int(tipp) ist ein Ausdruck, der zu einem integer ausgewertet wird. tipp wird erst durch den Zuweisungsoperator geändert: tipp = int(tipp)

Die Funktionen float(), str() und bool() geben sinngemäß float-, string- und Boolean-Versionen ihrer Argumente zurück. Probiere Folgendes in die interaktive Konsole einzugeben:

>>> float('42')
42.0
>>> float(42)
42.0
>>> str(42)
'42'
>>> str(42.0)
'42.0'
>>> str(False)
'False'
>>> bool('')
False
>>> bool('eine beliebige, nicht-leere Zeichenkette')
True

Den Funktionen int(), float(), str() und bool() erlauben es dir, Werte eines Datentyps in Werte eines anderen Datentyps umzuwandeln.

Variablen inkrementieren

17.    abgegebenTipps = abgegebenTipps + 1

Wenn der Spieler einen Tipp abgegeben hat, muss die Anzahl an abgegebenen Tipps um eins erhöht werden.

Bei der ersten Iteration der Schleife hat abgegebeneTipps den Wert 0. Python nimmt diesen Wert und addiert 1 dazu. 0 + 1 wird zu 1 ausgewertet. Dieser Wert wird dann als neuer Wert in abgegebeneTipps gespeichert. Du kannst dir vorstellen, dass Zeile 17 sagt: "abgegebeneTipps soll eins mehr sein, als es gerade ist."

Eins zum Ganzzahlen- oder Fließkommazahlenwert einer Variablen zu addieren nennt man auch “inkrementieren”. Zieht man eins vom Wert einer Variablen ab, nennt man dies “dekrementieren”.

if-Anweisungen

19.    if tipp < zahl:
20.        print('Dein Tipp ist zu niedrig.') # Hier sind acht Leerzeichen vor print.

Zeile 19 ist eine if-Anweisung. Die Ausführung wird den Programmcode im folgenden Block ausführen, falls die Bedingung in der if-Anweisung wahr ist. Ist Bedingung falsch, dann wird der Programmcode im if-Block übersprungen. if-Anweisungen erlauben es dir, Teile deines Programms nur dann auszuführen, wenn du es willst.

Zeile 19 überprüft, ob der Tipp des Spielers kleiner als die Geheimzahl des Computers ist. Ist das der Fall, dann wird die Ausführung in Zeile 20 innerhalb des if-Blocks fortgesetzt, in welchem der Computer dem Spieler mitteilt: "Dein Tipp ist zu niedrig."

Die if-Anweisung funktioniert fast wie eine while-Anweisung. Im Unterschied zum while-Block jedoch, springt die Ausführung am Ende des if-Blocks nicht zurück zur if-Anweisung. Sie fährt einfach in der nächsten Zeile fort. In anderen Worten: if-Anweisungen iterieren nicht. Abbildung 4-3 zieht einen Vergleich zwischen beiden Anweisungen.

Abbildung 4-3: if- und while-Anweisungen.

22.    if tipp > zahl:
23.        print('Dein Tipp ist zu hoch.')

Zeile 22 überprüft, ob der Tipp des Spielers größer als die Geheimzahl ist. Ist dies der Fall, dann teilt der Aufruf der print()-Funktion dem Spieler mit, dass sein Tipp zu hoch ist.

Schleifen vorzeitig mit der break-Anweisung verlassen

25.    if tipp == zahl:
26.        break

Die if-Anweisung in Zeile 25 überprüft, ob der Tipp gleich der Geheimzahl ist. Ist das der Fall, dann wird die break-Anweisung in Zeile 26 ausgeführt.

Eine break-Anweisung führt dazu, dass die Ausführung gleich nach dem while-Block fortgesetzt wird. Die Bedingung der while-Schleife wird nicht erneut überprüft.

Die break-Anweisung tritt nur in Schleifen auf, wie zum Beispiel in einem while-Block.

Wenn der Tipp des Spielers nicht gleich der Geheimzahl ist, dann erreicht die Ausführung das Ende des while-Blocks. Das heißt, dass die Ausführung wieder zum Beginn zurück springt und dort die Bedingung in Zeile 12 überprüft (abgegebeneTipps < 6). Wir erinnern uns, dass nach dem Ausführen von  abgegebeneTipps = abgegebeneTipps + 1, der neue Wert von abgegebeneTipps 1 ist. Weil 1 < 6 wahr ist, wird die Ausführung wieder in der Schleife fortgesetzt.

Wenn der Spieler weiter zu hoch oder zu niedrig rät, dann steigt abgegebeneTipps zuerst auf 2, dann auf 3, 4, 5 und schließlich auf 6. Wenn in abgegebeneTipps 6 erreicht, dann wird die Bedingung (abgegebeneTipps < 6) falsch (False), weil 6 nicht weniger als 6 ist. Da die Bedingung der while-Anweisung falsch ist, wir die Ausführung in der ersten Zeile nach dem while-Block fortgesetzt, Zeile 28.

Überprüfen, ob der Spieler gewonnen hat

28. if tipp == zahl:

Zeile 28 hat keine Einrückung, das heißt, dass der while-Block beendet ist und dass diese Zeile die erste nach dem while-Block ist. Die Ausführung hat den while-Block entweder verlassen, weil die Bedingung des while-Blocks falsch war (weil der Spieler keine Tipps mehr übrig hat) oder, weil die break-Anweisung in Zeile 26 ausgeführt wurde (wenn der Spieler richtig geraten hat).

Zeile 28 überprüft, ob der Spieler richtig geraten hat. Ist das der Fall, dann wird die Ausführung im if-Block fortgesetzt.

29.    abgegebenTipps = str(abgegebenTipps)
30.    print('Gut gemacht, ' + meinName + '! Du hast meine Zahl in ' + abgegebenTipps + ' Zügen erraten!')

Die Zeilen 29 und 30 werden nur ausgeführt, wenn die Bedingung in der if-Anweisung in Zeile 28 wahr ist (d.h. wenn der Spieler die Zahl des Computers richtig geraten hat).

Zeile 29 ruft die str()-Funktion auf, die den Zeichenkettenwert von abgegebeneTipps zurückgibt. Zeile 30 verkettet die Zeichenketten, um dem Spieler mitzuteilen, dass er gewonnen hat und wie viele Tipps er dazu benötigt hat. Nur Zeichenkettenwerte können mit anderen Zeichenketten verkettet werden. Aus diesem Grund musste in Zeile 29 angegebeneTipps in eine Zeichenkette umgewandelt werden. Wenn man versucht, eine Zeichenkette mit einer Ganzzahl zu verketten, dann gibt Python einen Fehler aus.

Überprüfen, ob der Spieler verloren hat

32. if tipp != zahl:

Zeile 32 verwendet den Vergleichsoperator != um zu überprüfen, ob der letzte Tipp des Spielers nicht gleich der Geheimzahl war. Wenn diese Bedingung wahr ist, dann wird die Ausführung im if-Block in Zeile 33 fortgeführt.

Zeile 33 und 34 befinden sich im if-Block und werden nur ausgeführt, falls die Bedingung in Zeile 32 wahr war.

33.    zahl = str(zahl)
34.    print('Nene. Die Nummer an die ich gedacht habe war ' + zahl)

In diesem Block teilt das Programm dem Spieler mit, was die Geheimzahl war, die er nicht erraten konnte. Dazu müssen wieder Zeichenketten verkettet werden, aber zahl enthält wieder eine Ganzzahl. Zeile 33 überschreibt diese Zahl mit der entsprechenden Zeichenkette, um die Verkettung mit der Zeichenkette 'Nene. Die Nummer an die ich gedacht habe war ' in Zeile 34 zu ermöglichen.

An diesem Punkt hat die Ausführung das Ende des Programmcodes erreicht und das Programm ist beendet. Gratuliere! Du hast gerade dein erstes richtiges Spiel geschrieben!

Du kannst den Schwierigkeitsgrad des Spiels ändern, indem du die Anzahl der Tipps, die der Spieler bekommt, änderst. Um dem Spieler nur 4 Tipps zu geben, ändere Zeile 12 von

12. while abgegebenTipps < 6:

in

12. while abgegebenTipps < 4:

Der Code weiter unten im while-Block erhöht die abgegebeneTipps Variable in jeder Iteration um 1. Indem die Bedingung zu abgegebeneTipps < 4 geändert wird, ist sichergestellt, dass der Code in der Schleife nur vier Mal ausgeführt wird statt sechs Mal. Das macht das Spiel viel schwieriger. Wenn du das Spiel einfacher machen willst, dann kannst du die Bedingung auf abgegebeneTipp < 8 oder abgegebenTipps < 10 ändern. So wird die Schleife noch einige Male öfter ausgeführt und der Spieler kann mehr Tipps abgegeben.

Kontrollfluss-Anweisungen

In den vorherigen Kapiteln hat die Ausführung des Programms oben begonnen und ist dann stur nach unten geflossen, wobei jede Instruktion der Reihe nach ausgeführt wurde. Mit while-, if-, else- und break-Anweisungen kannst du die Ausführung dazu bringen, Instruktionen wiederholt auszuführen oder sie zu überspringen, je nachdem ob eine Bedingung erfüllt ist oder nicht. Solche Anweisungen heißen Kontrollfluss-Anweisungen, weil sie den Fluss des Programms ändern können.

Zusammenfassung

Wenn jemand dich fragt: “Was ist denn nun Programmieren?”, was könntest du dann antworten? Programmieren ist nur das Schreiben von Programmcode, d.h. ein Programm zu erstellen, das von einem Computer ausgeführt werden kann.

“Aber was genau ist denn ein Programm?” Wenn du jemand ein Computerprogramm benutzen siehst (zum Beispiel, dein Rate die Zahl), dann siehst du nur Text, der auf dem Bildschirm erscheint. Das Programm entscheidet was der genaue Text (die Ausgabe des Programms) ist, basierend auf seinem Programmcode und dem Text, den der Spieler eintippt (der Benutzereingabe). Ein Programm ist also nur eine Sammlung von Anweisungen, die auf die Eingaben des Benutzers reagieren.

“Welche Art von Anweisungen?” Es gibt in Wirklichkeit nur wenige verschiedene Arten von Anweisungen.

1.  Ausdrücke sind durch Operatoren verknüpfte Werte. Ausdrücke werden zu einem einzelnen Wert ausgewertet. Zum Beispiel wertet 2 + 2 zu 4 oder 'Hallo' + ' '  + 'Welt' zu 'Hallo Welt' aus. Ausdrücke, die neben if- und while-Schlüsselwörtern stehen, können auch Bedingungen genannt werden.
2.  Zuweisungen speichern Werte in Variablen, damit du später im Programm wieder auf diese Werte zugreifen kannst.
3.  if-, while- und break-Anweisungen dienen dem Kontrollfluss. Sie können die Ausführung dazu veranlassen Anweisungen zu überspringen, sie zu wiederholen oder aus Schleifen auszubrechen. Funktionsaufrufe können den Fluss der Ausführung ebenfalls ändern, indem sie zu den Instruktionen in einer Funktion springen.
4.  Die print()- und input()-Funktionen. Diese Funktionen zeigen Text auf dem Bildschirm an und lesen Text von der Tastatur. Diese Funktionen werden I/O (kurz für Input/Output, Englisch für Eingabe/Ausgabe) genannt, weil sie mit der Ein-und Ausgabe von von Programmen zu tun haben.

So, und das sind schon alle vier  Arten von Anweisungen. Natürlich gibt es zahlreiche Details zu diesen vier Arten. In diesem Buch lernst du neue Datentype und Operatoren, neue Kontrollfluss-Anweisungen und zahlreiche Funktionen, die Python mitbringt, kennen. Es gibt auch verschiedene Arten von I/O, so wie die Eingabe durch die Maus oder Ausgabe von Ton oder Grafiken statt nur Text.

Die Personen, die deine Programme benutzen interessieren sich nur für I/O. Der Benutzer tippt auf der Tastatur und sieht dann Sachen auf dem Bildschirm und hört Dinge aus dem Lautsprecher. Der Computer benötigt ein Programm um zu wissen, was er anzeigen soll oder welche Töne er abspielen soll. Bei diesem Programm handelt es sich lediglich um eine Folge von Anweisungen, die du, als Programmierer, geschrieben hast.
